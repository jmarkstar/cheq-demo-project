apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "org.jetbrains.kotlin.plugin.parcelize"
apply plugin: "kotlin-kapt"
apply plugin: "dagger.hilt.android.plugin"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"
apply plugin: "com.chrisney.enigma"
apply plugin: "androidx.navigation.safeargs.kotlin"
apply from: '../jacoco.gradle'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.jmarkstar.cheqdemoproj"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {

            //https://dagger.dev/hilt/gradle-setup
            // The Hilt Gradle plugin sets annotation processor arguments.
            // If you are using other libraries that require annotation processor arguments, make sure you are adding arguments instead of overriding them.
            //For example, the following notably uses += to avoid overriding the Hilt arguments.
            annotationProcessorOptions {
                arguments += ["room.incremental" : "true"]
            }
        }

        //As OWASP suggestions, we need to secure the data which are stored in
        // the device. In this case, I'll encrypt the sqlite.db and the shared_preference.xml
        buildConfigField("boolean", "enableEncryption", "true")
    }

    buildFeatures {
        dataBinding true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            //v1 signature scheme makes our app vulnerable to Janus vulnerability on Android <7.0
            v1SigningEnabled false
            v2SigningEnabled true
        }
    }

    buildTypes {

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix = ".DEBUG"
            debuggable true
            testCoverageEnabled true
            minifyEnabled false

            buildConfigField "boolean", "enableEncryption", "false"
        }

        staging {
            minifyEnabled true
            debuggable true
            testCoverageEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            //As OWASP suggestions, we need to disable the android:debuggable attribute and sign the apk.
            debuggable false
            testCoverageEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

kapt {
    correctErrorTypes true
}

//As OWASP suggestion, we need to prevent the reverse engineering of the apk. In this case, I'm encrypting a java class
// where I have some secret keys with enigma(I would prefer to use DexGuard) before the obfuscation with Proguard.
enigma {
    enabled = false
    injectFakeKeys = true
    classes = ["com.jmarkstar.cheqdemoproj.common.security.Passphrases.java"]
}

//https://developer.android.com/training/dependency-injection/hilt-testing
// testing issue with hilt :( -> https://dagger.dev/hilt/gradle-setup.html#running-with-android-studio
hilt {
    enableTransformForLocalTests = true
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.fragment:fragment-ktx:1.2.5'
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_component_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_component_version"

    //viewmodel + lifedata
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$livecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$livecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$livecycle_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_viewmodel_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_viewmodel_version"

    //Database
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "net.zetetic:android-database-sqlcipher:$android_sqlcipher"
    implementation "androidx.sqlite:sqlite-ktx:$sqlite_ktx_version"

    implementation "androidx.security:security-crypto:$security_crypto_version"

    //DI - Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    //App Logging and crashes
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation platform("com.google.firebase:firebase-bom:$firebase_BoM")
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'

    //Test
    testImplementation "junit:junit:$junit_version"
    testImplementation "androidx.test:core:$testcore_version"
    testImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation "androidx.test:runner:$testRunner_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "com.jraska.livedata:testing-ktx:1.1.0"

    //Android Test
    androidTestImplementation "androidx.test:rules:1.3.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation "androidx.test:runner:$testRunner_version"
}